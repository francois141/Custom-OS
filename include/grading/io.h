/**
 * \file
 * \brief aos test header, io functions
 */

/*
 * Copyright (c) 2019, ETH Zurich.
 * Copyright (c) 2022, The University of British Columbia.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Universitaetstrasse 6, CH-8092 Zurich. Attn: Systems Group.
 */

///////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                               //
//                   !! WARNING !!   DO NOT EDIT THIS FILE   !! WARNING !!                       //
//                                                                                               //
//      This file is part of the grading library and will be overwritten before grading.         //
//              To ensure tests are run correctly, do not edit this file                         //
//                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GRADING_IO_H
#define GRADING_IO_H

#include <aos/solution.h>
#include <grading/grading.h>


/* Print without a <grading> banner. */
void grading_printf_nb(const char *fmt, ...);

/* Print with a <grading> banner. */
/* Synopsis: void grading_printf(const char *fmt, ...) */
#define grading_printf(fmt, ...) grading_printf_nb("<grading> " fmt, ##__VA_ARGS__);


#define grading_print_progress(it, total)                                                          \
    do {                                                                                           \
        if ((it) % ((total) / 10) == 0) {                                                          \
            grading_printf("Iteration %zu / %zu (progress)\n", it, total);                         \
        }                                                                                          \
    } while (false);

/* Stop processing */
static inline void grading_stop(void)
{
    grading_printf("Grading Stop.");
    while (1)
        ;
};

/* Record test failure. */
/* Synopsis: grading_test_fail(const char *test, const char *fmt, ...) */
#define grading_test_fail(test, fmt, ...)                                                          \
    grading_printf("TEST FAILED: % 5s " fmt, test, ##__VA_ARGS__);

#define grading_test_fail_err(test, err, fmt, ...)                                                 \
    DEBUG_ERR(err, fmt, ##__VA_ARGS__);                                                            \
    grading_printf("TEST FAILED: % 5s " fmt, test, ##__VA_ARGS__);

/* Record test success. */
/* Synopsis: grading_test_pass(const char *test, const char *fmt, ...) */
#define grading_test_pass(test, fmt, ...)                                                          \
    grading_printf("TEST PASSED: % 5s " fmt, test, ##__VA_ARGS__);

/* Panic and spin. */
/* Synopsis: void grading_panic(const char *fmt, ...) */
#define grading_panic(fmt, ...)                                                                    \
    do {                                                                                           \
        grading_printf("PANIC: " fmt, ##__VA_ARGS__);                                              \
        grading_stop();                                                                            \
    } while (0)

/// expects the error value to be success, aborts otherwise
#define GRADING_EXPECT_SUCCESS(lbl, err, fmt, ...)                                                 \
    if (err_is_fail(err)) {                                                                        \
        grading_test_fail_err(lbl, err, "%s (%s:%d)", fmt, ##__VA_ARGS__, __FUNCTION__, __LINE__); \
        grading_stop();                                                                            \
    }

/// expects the error value to be success, aborts otherwise
#define GRADING_SHOULD_SUCCEED(lbl, err, fmt, ...)                                                 \
    if (err_is_fail(err)) {                                                                        \
        grading_test_fail_err(lbl, err, "%s (%s:%d) -- continue", fmt, ##__VA_ARGS__,              \
                              __FUNCTION__, __LINE__);                                             \
    }

/// expects the error value to be fail, aborts otherwise
#define GRADING_EXPECT_FAIL(lbl, err, fmt, ...)                                                    \
    if (err_is_ok(err)) {                                                                          \
        grading_test_fail_err(lbl, err, "%s (%s:%d)", fmt, ##__VA_ARGS__, __FUNCTION__, __LINE__); \
        grading_stop();                                                                            \
    }

/// expects the error value to be fail, continues otherwise
#define GRADING_SHOULD_FAIL(lbl, err, fmt, ...)                                                    \
    if (err_is_ok(err)) {                                                                          \
        grading_test_fail_err(lbl, err, "%s (%s:%d) -- continue", fmt, ##__VA_ARGS__,              \
                              __FUNCTION__, __LINE__);                                             \
    }

#endif
