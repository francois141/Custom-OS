/*
 * Copyright (c) 2019, ETH Zurich.
 * Copyright (c) 2022, The University of British Columbia.
 * All rights reserved.
 *
 * This file is distributed under the terms in the attached LICENSE file.
 * If you do not find this file, copies can be found by writing to:
 * ETH Zurich D-INFK, Universitaetstrasse 6, CH-8092 Zurich. Attn: Systems Group.
 */

///////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                               //
//                   !! WARNING !!   DO NOT EDIT THIS FILE   !! WARNING !!                       //
//                                                                                               //
//      This file is part of the grading library and will be overwritten before grading.         //
//              To ensure tests are run correctly, do not edit this file                         //
//                                                                                               //
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef GRADING_TEST_M0_H
#define GRADING_TEST_M0_H

#include <aos/aos.h>

// forward declaration
struct mm;



/*
 * Physical Memory Management (M1)
 * -------------------------------
 *
 * This test exercise the physical memory management as implemented by libmm
 * through a series of allocation and free requests to the memory manager.
 *
 * Run:
 *   - after libmm has initialized and memory has been added
 */

errval_t grading_run_tests_physical_memory(struct mm *mm);

/*
 * Virtual Memory Management (M2)
 * ------------------------------
 *
 * This test exercise the virtual memory management including self-paging
 * functionality through a series of paging requests and heap allocations.
 *
 * Run:
 *   - grading_tests_early()
 *   - grading_tests_late()
 */

errval_t grading_run_tests_virtual_memory(bool early);

/*
 * Process Management (M3)
 * -----------------------
 *
 * This test exercise the functionality of the process manager including
 * spawning, listing, and terminating processes.
 *
 * Run:
 *   - grading_tests_late()
 */

errval_t grading_run_tests_processes(void);

/*
 * Inter Process Communication (M4)
 * --------------------------------
 *
 * This test exercise the RPC functionality including various types of RPCs
 * from spawned processes to the servers.
 *
 * Run:
 *   - grading_tests_late()
 */
errval_t grading_run_tests_rpc(void);

/*
 * Multicore (M5)
 * --------------
 *
 * This test exercise the multicore functionality of starting the second core,
 * to running a subset of the tests cross core.
 *
 * Run:
 *   - grading_tests_late()
 */
errval_t grading_run_tests_multicore(void);

/*
 * User-Level RPC (M6)
 * -------------------
 *
 * This tests exercises the urpc functionality by running extensive cross core test
 *
 * Run:
 *   - grading_tests_late()
 */
errval_t grading_run_tests_urpc(void);

#endif
